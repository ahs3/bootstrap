#!/bin/bash -x
#
# This script is the first stage in bootstrapping a Fedora build to a
# new platform or architecture.  Running with no arguments builds a
# cross-development environment, then cross-builds a minimal rootfs.
# Once you have this minimal rootfs booted, run stage2 in that rootfs
# to build the rest of the bootstrap packages.
#
# This script assumes that all the needed SRPMs are available in
# $SRPMDIR (below) and that there is exactly one rev of each package's
# SRPM.  The resulting rootfs will be build in $ROOTFS (below).
#
# This script depends on the following packages being available on the host:
#	automake autoconf libtool make patch gcc gcc-c++ bison flex
#	gmp-devel mpfr-devel libmpc-devel rsync gettext-devel tcl
#
# Note that SRPMDIR_LOCAL is for local SRPMs that override the
# official ones, for example, board-specific kernel RPMs.
#
# You may pass a single module name on the command line to rebuild
# just that one module.  Module names match the big case statement
# below.
#
# For reference, when a package is built multiple times...
#
# foo-host is the "runs on host" part of a standard cross-compiler
# foo-target is the target libraries etc
# target-foo is a cross-built target-native
#
# Note that the "dev" step requires sudo, as it installs special files
# in $ROOTFS/dev/
#
# Overall instructions for building stages 1-3 are:
#	# Build stage1.
#	Run "./stage1" in the build host.
#
#	# Copy $ROOTFS to the box that will run the chroot in stage2.
#
#	# In the box that will run the chroot do:
#	$ chroot /path/to/chroot /bin/bash
#
#	Note: If inside the chroot, you cannot do "ps", you will
#	need to go outside of the chroot and:
#		mount -o bind /proc /path/to/chroot/proc
#		mount -o bind /sys /path/to/chroot/sys
#	FIXME: ^^^^^ This could be determined programatically from within
#		the chroot, and at least dump out an error if ps doesn't
#		work.
#	FIXME: Check the sanity of the chroot programatically
#		(presence of /proc, /sys, SRPMS, noarch RPMS, etc
#
#	# Build stage2 within the chroot.
#       $ cd /stage2
#	# Update -j1 to whatever is appropriate in local.conf.
#	$ ./stage2
#
#	# Prepare environment for building stage3.
#	Run "./stage1 stage3" in the build host.
#	Copy host:$ROOTFS/stage3 to chroot:/
#	Copy host:SRPMs to chroot:/SRPMS
#	Copy [noarch-RPMS] to chroot:/RPMS-noarch/

#	# Build stage3 in the chroot.
#	$ cd /stage3
#	# Update -j1 to whatever is appropriate in local.conf.
#	$ ./stage3"
#
# ------------------------------------------------------------

### Architecture dependent configury

# TARGET: The cross-compiler target.
TARGET=aarch64-redhat-linux-gnu

# KARCH: Used by the kernel and glibc.

# KERNEL_RPMTARGET: Due to naming politics, the kernel may have a
# different target than $TARGET.

# RPMTARGET: RPMBUILD target for prepping sources.

# SUFFIX: Default library path.

# EGLIBC_ARCH: ARCH variable for eglibc.

# CONFIG_EXTRA: Additional parameters to pass to ./configure.

# GCC_CONFIG_EXTRA: Additional parameters to pass to GCC's ./configure.

# BUSYBOX_DEFCONFIG: config file to use for busybox

case $TARGET in
    aarch64-*)
	KCONFIG=kernel-3.*-arm64.config
	KARCH=arm64
	KERNEL_RPMTARGET=$TARGET
	RPMTARGET=$TARGET
	SUFFIX=64
	CONFIG_EXTRA="--with-arch=armv8
                      --with-fpu=neon-fp-armv8"
	GCC_CONFIG_EXTRA="--with-arch=armv8-a"
	EGLIBC_ARCH=arm
	BUSYBOX_DEFCONFIG=defconfig
	;;
    ppc64le-*)
	KCONFIG=kernel-3.*-ppc64le.config
	KARCH=powerpc
	RPMTARGET=$TARGET
	KERNEL_RPMTARGET=$TARGET
	SUFFIX=64
	CONFIG_EXTRA=""
	GCC_CONFIG_EXTRA="--disable-multilib"
	EGLIBC_ARCH=ppc
	BUSYBOX_DEFCONFIG=defconfig
	;;
    *)
	echo "ERROR: Unsupported TARGET=$TARGET".
	exit 1
	;;
esac

### Directory and miscelaneous configury

TOP=$PWD
MYDIR=${0%/*}
STAGE2=$MYDIR/stage2
STAGE3=$MYDIR/stage3

SRPMDIR=$TOP/SRPMs
SRPMDIR_LOCAL=$TOP/SRPMlocal
if [ -x /usr/bin/nproc ]; then
    J=-j$(nproc)
else
    J=-j1
fi
# default port for native builds is 3632, don't use that
DISTCC_PORT=3639

BUILDDIR=$TOP/builds
PREFIX=$TOP/install
KCONFIGDIR=$BUILDDIR/kernel
KIMAGE=uImage
NEED_XLOADER=no
NEED_UBOOT=no

# this is where the new rootfs will be built
ROOTFS=$TOP/rootfs

if [ -f $MYDIR/local.conf ]
then
    . $MYDIR/local.conf
fi

# ------------------------------------------------------------
# Sanity checks

error()
{
    echo Error: "$@" 1>&2
    ERROR=1
}

if [ ! -d $SRPMDIR/. ]
then
    error SRPMDIR set to $SRPMDIR, but I see no directory there
    echo '$'SRPMDIR usually refers to a symlink to a directory with all the '*'.src.rpm files in it.
    echo SRPMDIR_LOCAL may likewise refer to a directory with local srpm overrides in it
fi

test x"$ERROR" = x"1" && exit 1

unset CC
unset CXX
unset CFLAGS
unset CXXFLAGS
unset AR
unset LD
unset AS

if [ -f /usr/local/include/ppl_c.h ]
then
    WITHPPL="--with-ppl=/usr/local"
else
    WITHPPL=""
fi

# ------------------------------------------------------------

echo
echo Running: $0 $*
echo Date: `date`
echo Cwd: `pwd`
echo

SRCTOP=$TOP/rpmbuild
SRC=$SRCTOP/BUILD
SPECS=$SRCTOP/SPECS

mkdirp()
{
    test -d $1 || mkdir -p $1
}

mkdirp $SRC
mkdirp $ROOTFS
mkdirp $PREFIX
mkdirp $BUILDDIR
mkdirp $TOP/done

export PATH=$PREFIX/bin:$PATH

mcd()
{
    test -d $1 || mkdir -p $1
    cd $1
}

srpm()
{
    STOP=${2-$TOP}
    STARGET=${3-$RPMTARGET}
    SDIR=$SRPMDIR_LOCAL
    SRPM=$(cd $SDIR; \ls -1 $1-*.src.rpm 2>/dev/null | egrep -v $1'-.*-.*-' | tail -1)
    if [ -f $SDIR/$SRPM ]
    then true; else
	SDIR=$SRPMDIR
	SRPM=$(cd $SDIR; \ls -1 $1-*.src.rpm 2>/dev/null | tail -1)
	SRPM=$(cd $SDIR; \ls -1 $1-*.src.rpm 2>/dev/null | egrep -v $1'-.*-.*-' | tail -1)
    fi
    echo SRPM is $SRPM
    SPEC=${SRPM%-*}
    SPEC=${SPEC%-*}
    if [ -f $STOP/rpmbuild/SPECS/$SPEC.spec ];
    then true; else
	test -f $SDIR/$SRPM || exit 1
	HOME=$STOP rpm -i $SDIR/$SRPM
	cd $STOP/rpmbuild/SPECS

	HOME=$STOP rpmbuild --target=$STARGET --nodeps -bp $SPEC.spec

	# Fix libtool.m4 and associated configure files if appropriate.
	#
	# FIXME: A better alternative would be to only look in
	# $SRC/$1-*, but for some packages $1 == libmpc, whereas the
	# directory is mpc.  We could duplicate this code for each package
	# right before its ./configure, but that's tedious.
	#
	# If the `find' in the script below takes too long, perhaps it's
	# time to rethink this.
	(cd $STOP && $TOP/libtool-handle-ppc64le.sh)

	cd $TOP
    fi
}
rsrpm()
{
    srpm $1 $ROOTFS/stage2
}

set -e

BUILD=`gcc -v 2>&1 | grep Target: | sed 's/.*: //'`

# These are for cross-tools like binutils
CONFIGARGS="--prefix=$PREFIX
            --libdir=$PREFIX/lib${SUFFIX}
	    --target=$TARGET
	    ${CONFIG_EXTRA}
	    --enable-languages=c,c++
	    --with-sysroot=$ROOTFS
	    --enable-threads=posix
	    --enable-64-bit-bfd
	    $WITHPPL
"

TCONFIGARGS="--prefix=/usr
             --libdir=/usr/lib${SUFFIX}
	     --with-sysroot=/
	     --with-build-sysroot=$ROOTFS
	     --build=$BUILD
	     --host=$TARGET
	     --target=$TARGET
	     --enable-werror=no
	     --enable-cxx
	     ${CONFIG_EXTRA}
	     --enable-languages=c,c++
	     --enable-threads=posix
	     --without-guile
"

# These are for gcc cross-tools (politics sometime result in slightly
# different arch names)
GCC_CONFIGARGS="--prefix=$PREFIX
            --libdir=$PREFIX/lib${SUFFIX}
	    --target=$TARGET
	    ${GCC_CONFIG_EXTRA}
	    --enable-languages=c,c++
	    --with-sysroot=$ROOTFS
	    --enable-threads=posix
	    --enable-64-bit-bfd
	    $WITHPPL
"

GCC_TCONFIGARGS="--prefix=/usr
             --libdir=/usr/lib${SUFFIX}
	     --with-sysroot=/
	     --with-build-sysroot=$ROOTFS
	     --build=$BUILD
	     --host=$TARGET
	     --target=$TARGET
	     --enable-werror=no
	     --enable-cxx
	     ${GCC_CONFIG_EXTRA}
	     --enable-languages=c,c++
	     --enable-threads=posix
"

KERNELARGS="ARCH=${KARCH} CROSS_COMPILE=${TARGET}-"


# Must use install_root=$ROOTFS on all makes


notparallel()
{
    echo .NOTPARALLEL: >> Makefile
}

fix_la()
{
    for la in $ROOTFS/usr/lib${SUFFIX}/*$1*.la
    do
	if test -f $la
	then
	    rm $la
	fi
    done
}

#--------------------------------------------------

go()
{
    test -f $TOP/done/$1 && return 0
    if "$0" "$@"
    then
	date > $TOP/done/$1
    else
	echo
	echo Module "$@" failed
	return 1
    fi
}

case "$1" in
    "" )
	go usrlinks
	go kernel-headers
	go binutils
	go gcc-host
	go glibc-headers
	go gcc-libgcc
	go glibc
	go gcc
	go dev

#       go kernel
	test x"$NEED_XLOADER" == x"yes" && go x-loader
	test x"$NEED_UBOOT" == x"yes" && go u-boot

	go gmp
	go mpfr
	go mpc

	go libsepol
	go zlib

	go t-binutils
	go t-gcc
	go make
	go sed
	go coreutils
	go busybox
	# Bash must come after busybox so the `sh' symbolic link is bash,
	# not busybox.
	go bash
	go util-linux
	go tar
	go gzip
	go bzip2
	go diffutils
	go xz
	go pcre
	go libselinux
	go findutils
	go gawk
	go patch
	go unzip
	go which
	go grep
#	go distcc
#	go ccache

	# After the stage2 environment is built here...
	go stage2
	# ...we're done.  The rest of stage2 must be built in a
	# chroot.  When stage2 packages are built in said chroot, the
	# stage3 environment can be generated.
	exit 0

	go stage3

	;;

    "clean" )
	set -vx
	mkdir .quickrm.$$
	mv -f $SRCTOP $ROOTFS $PREFIX $BUILDDIR $TOP/done .quickrm.$$
	rm -rf .quickrm.$$ &
	;;

    "sync" )
#	echo Copying built rootfs to panda-1...
#	rsync -a $ROOTFS/ root@panda-1:/hardfp/
	;;

    "test1" )
	echo test running
	go test
	echo test passed
	;;

    "test" )
	echo Testing
	exit 1
	;;

    * ) # search for stage1 recipe
	if [ -f $TOP/stage1.d/$1 ]; then
	    echo "*** Sourcing recipe for $1 ***"
	    . $TOP/stage1.d/$1
	else
	    echo "ERROR: Recipe for $1 not found!"
	    exit 1
	fi

esac

exit 0
