#!/bin/sh

# Prerequisites:
# - builders running fedora
# - ssh-key transferred to the builders (root account)
# - the following packages installed on the builders
#     byacc screen yum-utils rpm-build automake autoconf libtool make patch gcc gcc-c++ bison flex gmp-devel mpfr-devel libmpc-devel rsync gettext-devel tcl texinfo

STAGE1_BUILD_ARCH_LIST="x86_64 i686 aarch64 armv7hl ppc64le ppc64 s390x"
STAGE1_TARGET_ARCH_LIST="$STAGE1_BUILD_ARCH_LIST"
STAGE2_BUILD_ARCH_LIST="$STAGE1_BUILD_ARCH_LIST" # subset of STAGE1_BUILD_ARCH_LIST and STAGE1_TARGET_ARCH_LIST intersection (stripped more later in case of failed builds)

cd ${0%/*}/..
TOPDIR=${PWD}
LOGDIR=${TOPDIR}/logs
TESTSUITE_DIR=${TOPDIR}/testsuite
BUILDERS_DIR=${TESTSUITE_DIR}/builders
TMPDIR=/var/tmp

# color definitions
_NORMAL="\033[0m"
_GREEN="\033[0;32m"
_BROWN="\033[0;33m"
_WHITE="\033[1;37m"
_DARKGRAY="\033[1;30m"

echo ""
echo -e "${_GREEN}====${_WHITE} FEDORA BOOTSTRAP ${_GREEN}====${_NORMAL}"
export LC_ALL=C

# make a tarball
echo -e "${_BROWN}*${_NORMAL} Generating fedora-bootstrap tarball ..."
rm -f fedora-bootstrap.tar.xz && \
mkdir -p ${LOGDIR} && \
rm -rf ${LOGDIR}/* && \
rm -rf ${TMPDIR}/fedora-bootstrap && \
mkdir ${TMPDIR}/fedora-bootstrap && \
sed -i "s|^STAGE1_TARGET_ARCH_LIST='.*'|STAGE1_TARGET_ARCH_LIST='${STAGE1_TARGET_ARCH_LIST}'|" testsuite/run-stage1 && \
cp -a * ${TMPDIR}/fedora-bootstrap/ && \
(cd ${TMPDIR} ; tar cJf fedora-bootstrap.tar.xz fedora-bootstrap) && \
cp ${TMPDIR}/fedora-bootstrap.tar.xz .


# ****** STAGE1 ******

echo ""
echo -e "${_GREEN}====${_WHITE} Entering STAGE1 ${_GREEN}====${_NORMAL}"

# transfer the fedora-bootstrap tarball to the builders
echo -e "${_BROWN}*${_NORMAL} Transferring fedora-bootstrap tarball to builders ..."
for arch in $STAGE1_BUILD_ARCH_LIST ; do
  builder=`cat ${BUILDERS_DIR}/${arch}`
  echo -e "${_DARKGRAY}->${_NORMAL} $arch: $builder"
  scp fedora-bootstrap.tar.xz root@${builder}:/home/
done

echo -e "${_BROWN}*${_NORMAL} Starting stage1 on the builders ..."
# run the stage1 remotely on all builders
for arch in $STAGE1_BUILD_ARCH_LIST ; do
  builder=`cat ${BUILDERS_DIR}/${arch}`
  echo -e "${_DARKGRAY}->${_NORMAL} $arch: $builder"
  ssh -x root@${builder} "cd /home && rm -rf /home/fedora-bootstrap && tar xf fedora-bootstrap.tar.xz && cd fedora-bootstrap && echo \"${arch}\" > i_am && ./testsuite/run-stage1 --screen"
done

echo -e "${_BROWN}*${_NORMAL} Waiting for builders to finish stage1 ..."
mkdir -p ${LOGDIR}/stage1
while : ; do
  stage1_done=1
  for arch in $STAGE1_BUILD_ARCH_LIST ; do
    if [ ! -d ${LOGDIR}/stage1/$arch ]; then
      builder=`cat ${BUILDERS_DIR}/${arch}`
      scp root@${builder}:/home/fedora-bootstrap/logs-stage1.tgz ${LOGDIR}/stage1/ &> /dev/null
      if [ $? = 0 ]; then
	mkdir -p ${LOGDIR}/stage1/$arch
	mv ${LOGDIR}/stage1/logs-stage1.tgz ${LOGDIR}/stage1/$arch/
	(cd ${LOGDIR}/stage1/$arch && tar xf logs-stage1.tgz && rm -f logs-stage1.tgz)
	echo "$arch finished"
      else
	stage1_done=0
      fi
    fi
  done
  [ $stage1_done = 1 ] && break;
  sleep 60
done

echo -e "${_BROWN}*${_NORMAL} Processing stage1 results ..."
for arch in $STAGE1_BUILD_ARCH_LIST ; do
  line_nr=0
  line_cnt=`cat ${LOGDIR}/stage1/${arch}/screenlog-stage1.txt | grep -e 'Building stage1' -e "^Module .* failed" -e '^Module stage2 ready' | wc -l`
  cat ${LOGDIR}/stage1/${arch}/screenlog-stage1.txt | grep -e 'Building stage1' -e "^Module .* failed" -e '^Module stage2 ready' | while read line ; do
    first=`echo $line | cut -f1 -d' '`
    if [ "$first" == "====" ]; then
      [ $line_nr -gt 0 ] && echo "$arch $log_arch $log_failed"
      log_arch=`echo $line | cut -f5 -d' '`
      log_failed='*MISSING*'
    elif [ "$first" == "Module" ]; then
      log_mod_status=`echo $line | cut -f3 -d' ' | sed "s|\r||"`
      if [ "$log_mod_status" == "ready" ]; then
	log_failed='*OK*'
      elif [ "$log_mod_status" == "failed" ]; then
	log_failed=`echo $line | cut -f2 -d' '`
      else
	echo "ERROR: Unexpected module status \"${log_mod_status}\""
	exit 1
      fi
    else
      echo "ERROR: Unexpected token \"${first}\""
      exit 1
    fi
    line_nr=$((line_nr+1))
    [ $line_nr = $line_cnt ] && echo "$arch $log_arch $log_failed"
  done
done > ${LOGDIR}/stage1/results-stage1.txt

${TESTSUITE_DIR}/generate-stage1-html

echo -e "${_BROWN}*${_NORMAL} stage1 done"


# ****** STAGE2 ******

echo ""
echo -e "${_GREEN}====${_WHITE} Entering STAGE2 ${_GREEN}====${_NORMAL}"


echo -e "${_BROWN}*${_NORMAL} Transferring stage2 rootfs ..."
rm -rf ${TMPDIR}/fedora-bootstrap && mkdir ${TMPDIR}/fedora-bootstrap
default_rotation=`cat ${TESTSUITE_DIR}/builder_rotation`
stage2_builder_array=($STAGE2_BUILD_ARCH_LIST)
stage2_builder_count=${#stage2_builder_array[*]}
for (( arch_index=0; arch_index<${stage2_builder_count}; arch_index++ )); do
  arch=${stage2_builder_array[$arch_index]}
  builder=`cat ${BUILDERS_DIR}/${arch}`

  # searching for complete stage1 data
  rotation=${default_rotation}
  while : ; do
    stage1_arch_index=$(((arch_index+rotation)%stage2_builder_count))
    stage1_arch=${stage2_builder_array[$stage1_arch_index]}
    cat ${LOGDIR}/stage1/results-stage1.txt | grep "^${stage1_arch} ${arch} \*OK\*" &> /dev/null
    src_ok=$?
    if [ ${src_ok} -eq 0 ] ; then
      break;  # the current stage1_arch contains complete stage1 data, exit the loop
    else
      rotation=$((rotation+1))  # we don't have a working stage1 on the chosen source builder, trying the next one
      # FIXME - infinite loop if none exists ... we wanna consider the STAGE1 list too, if all fails
    fi
  done
  take_stage1_from=`cat ${BUILDERS_DIR}/${stage1_arch}`

  if [ "$arch" = "$stage1_arch" ]; then # taking from the same builder, copy only
    echo -e "${_DARKGRAY}<->${_NORMAL} $arch: $builder"
    ssh -x root@${builder} "cd /home/fedora-bootstrap && rm -rf /home/fedora-bootstrap/rootfs.stage2 && cp -a rootfs.${arch} rootfs.stage2"
  else # taking from different builder (compress, transfer, transfer, uncompress)
    echo -e "${_DARKGRAY}<-${_NORMAL} $stage1_arch: $take_stage1_from"
    ssh -x root@${take_stage1_from} "cd /home/fedora-bootstrap && tar czf rootfs.${arch}.tgz rootfs.${arch}"
    scp root@${take_stage1_from}:/home/fedora-bootstrap/rootfs.${arch}.tgz ${TMPDIR}/fedora-bootstrap/
    echo -e "${_DARKGRAY}->${_NORMAL} $arch: $builder"
    scp ${TMPDIR}/fedora-bootstrap/rootfs.${arch}.tgz root@${builder}:/home/fedora-bootstrap/
    ssh -x root@${builder} "cd /home/fedora-bootstrap && rm -rf /home/fedora-bootstrap/rootfs.stage2 && tar xzf rootfs.${arch}.tgz --transform 's/rootfs.${arch}/rootfs.stage2/'"
    rm -f ${TMPDIR}/fedora-bootstrap/rootfs.${arch}.tgz
  fi
done

echo -e "${_BROWN}*${_NORMAL} Starting stage2 on the builders ..."
# run the stage2 remotely on all builders
for arch in $STAGE2_BUILD_ARCH_LIST ; do
  builder=`cat ${BUILDERS_DIR}/${arch}`
  echo -e "${_DARKGRAY}->${_NORMAL} $arch: $builder"
  ssh -x root@${builder} "cd /home/fedora-bootstrap && echo \"${arch}\" > i_am && ./testsuite/run-stage2 --screen"
done

echo -e "${_BROWN}*${_NORMAL} Waiting for builders to finish stage2 ..."
mkdir -p ${LOGDIR}/stage2
while : ; do
  stage2_done=1
  for arch in $STAGE2_BUILD_ARCH_LIST ; do
    if [ ! -d ${LOGDIR}/stage2/$arch ]; then
      builder=`cat ${BUILDERS_DIR}/${arch}`
      scp root@${builder}:/home/fedora-bootstrap/logs-stage2.tgz ${LOGDIR}/stage2/ &> /dev/null
      if [ $? = 0 ]; then
	mkdir -p ${LOGDIR}/stage2/$arch
	mv ${LOGDIR}/stage2/logs-stage2.tgz ${LOGDIR}/stage2/$arch/
	(cd ${LOGDIR}/stage2/$arch && tar xf logs-stage2.tgz && rm -f logs-stage2.tgz)
	echo "$arch finished"
      else
	stage2_done=0
      fi
    fi
  done
  [ $stage2_done = 1 ] && break;
  sleep 60
done

echo -e "${_BROWN}*${_NORMAL} Processing stage2 results ..."
for arch in $STAGE2_BUILD_ARCH_LIST ; do
  cat ${LOGDIR}/stage2/${arch}/screenlog-stage2.txt | grep '^done!' &> /dev/null
  if [ $? -eq 0 ]; then
    log_failed='*OK*'
  else
    log_failed=`cat ${LOGDIR}/stage2/${arch}/screenlog-stage2.txt | grep "recipe for target .* failed" | cut -f2 -d"'" | cut -f2 -d"/"`
  fi
  echo "${arch} ${log_failed}"
done > ${LOGDIR}/stage2/results-stage2.txt
${TESTSUITE_DIR}/generate-stage2-html
